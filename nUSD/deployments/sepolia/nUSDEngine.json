{
  "address": "0xf90cE9d085bf6545cB983C806a09b2E155a96192",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "dscAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_convertorAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "nDSCEngine__InsufficientBalance",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "nDSCEngine__NeedsMoreThanZero",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "nUSDEngine__MintFailed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "nUSDEngine__TransferFailed",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "User",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Deposited",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "User",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Redeemed",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "deposite",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getDepositBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTotalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "redeem",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xf0d24ebdaeae0d3a12519eb44990381ae2504dc7f6f418564e82520e09b341c9",
  "receipt": {
    "to": null,
    "from": "0x4Bd173f33cC6Db62f95E2bDBaF6d5723c179a668",
    "contractAddress": "0xf90cE9d085bf6545cB983C806a09b2E155a96192",
    "transactionIndex": 37,
    "gasUsed": "818740",
    "logsBloom": "0x
    "blockHash": "0xb429060240f8f305d19ac4280a54c66dbb5c947c6c5ffff7abfc3217c2e9cd6c",
    "transactionHash": "0xf0d24ebdaeae0d3a12519eb44990381ae2504dc7f6f418564e82520e09b341c9",
    "logs": [],
    "blockNumber": 3789425,
    "cumulativeGasUsed": "8091025",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xbE525dAC9110044ABcdDCbEAA76F5bcE726A7f6D",
    "0x694AA1769357215DE4FAC081bf1f309aDC325306"
  ],
  "numDeployments": 2,
  "solcInputHash": "b363cb7ad0c421440c830742ac862c95",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"dscAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_convertorAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"nDSCEngine__InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"nDSCEngine__NeedsMoreThanZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"nUSDEngine__MintFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"nUSDEngine__TransferFailed\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"User\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"User\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Redeemed\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"deposite\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getDepositBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"redeem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Parthib Datta  The system is designed to be as minimal as possible, and have the tokens maintain a (1/2 of Price of ETH) token == Price of ETH peg at all times. This is a stablecoin with the properties: - Exogenously Collateralized - ETH Pegged - Algorithmically Stable It is similar to DAI if DAI had no governance, no fees, and was backed by only ETH.\",\"kind\":\"dev\",\"methods\":{\"constructor\":{\"params\":{\"_convertorAddress\":\": Address of the converter contract\",\"dscAddress\":\": Address of the token\"}},\"redeem(uint256)\":{\"params\":{\"amount\":\": The Amount of ETH you want to redeem in Gwei\"}}},\"title\":\"nUSDEngine\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"deposite()\":{\"notice\":\"The amount of ETH you want to deposit\"}},\"notice\":\"This contract is the core of the Decentralized Stablecoin system. It handles all the logic for minting and redeeming DSC, as well as depositing and withdrawing collateral.  This contract is just the ERC20 implementation of our stablecoin system\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/nUSDEngine.sol\":\"nUSDEngine\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0x6e6e4b0835904509406b070ee173b5bc8f677c19421b76be38aea3b1b3d30846\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xa535a5df777d44e945dd24aa43a11e44b024140fc340ad0dfe42acf4002aade1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * The default value of {decimals} is 18. To change this, you should override\\n * this function so it returns a different value.\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address from, address to, uint256 amount) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n}\\n\",\"keccak256\":\"0xa56ca923f70c1748830700250b19c61b70db9a683516dc5e216694a50445d99c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/Oracle/Converter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\n\\n/**\\n * @title Convertor\\n * @author Parthib Datta\\n * @notice This contract is to convert the Price of Eth to USD in real time. It take input in GWei\\n */\\ncontract Convertor {\\n    AggregatorV3Interface internal dataFeed;\\n\\n    constructor() {\\n        dataFeed = AggregatorV3Interface(\\n            0x694AA1769357215DE4FAC081bf1f309aDC325306\\n        );\\n    }\\n\\n    function getVersion() public view returns (uint256) {\\n        return dataFeed.version();\\n    }\\n\\n    function getLatestData() public view returns (uint256) {\\n        (, int answer, , , ) = dataFeed.latestRoundData();\\n        return uint256(answer);\\n    }\\n\\n    function getConversionRate(\\n        uint256 gweiAmount\\n    ) public view returns (uint256) {\\n        uint256 ethPrice = getLatestData();\\n        uint256 price = ethPrice * gweiAmount;\\n        uint256 totalPrice = price / 1e17;\\n        return totalPrice;\\n    }\\n}\\n\",\"keccak256\":\"0x1e8d9a5bbcbe30071de3443583acce6278a26f9f5ba0d0c04f07b49c92cfc2b9\",\"license\":\"MIT\"},\"contracts/StableCoin.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\n\\n/** \\n*  @title DecentralizedStableCoin\\n*  @author Parthib Datta\\n*  Collateral: Exogenous(ETH)\\n*  Minting: Algorihmic\\n*  Relative Stability: Pegged to ETH\\n*\\n*  This contract is just the ERC20 implementation of our stablecoin system\\n*\\n*/\\ncontract StableCoin is ERC20{\\n  error DecentralizedStableCoin__AmountMustBeMoreThanZero();\\n  error DecentralizedStableCoin__BurnAmountExceedsBalance();\\n  error DecentralizedStableCoin__NotZeroAddress();\\n\\n  constructor()ERC20(\\\"StableCoin\\\",\\\"nUSD\\\") {}\\n\\n  /**\\n   * \\n   * @param _to : The transfer address account\\n   * @param _amount : How much you want to mint\\n   */\\n  function mint(address _to, uint256 _amount) external returns (bool) {\\n        if (_to == address(0)) {\\n            revert DecentralizedStableCoin__NotZeroAddress();\\n        }\\n        if (_amount <= 0) {\\n            revert DecentralizedStableCoin__AmountMustBeMoreThanZero();\\n        }\\n        _mint(_to, _amount);\\n        return true;\\n    }\\n\\n  /**\\n   * \\n   * @param account : The account from where to burn\\n   * @param _amount : The Amount to burn\\n   */\\n  function burn(address account,uint256 _amount) external {\\n        if (_amount <= 0) {\\n            revert DecentralizedStableCoin__AmountMustBeMoreThanZero();\\n        }\\n        _burn(account, _amount);\\n    }\\n}\",\"keccak256\":\"0xa35dfe5301cecaeca7cbc61d4b1f3e2508c7633b4ac5ea4a370fc6d5be5ce753\",\"license\":\"MIT\"},\"contracts/nUSDEngine.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\nimport \\\"./StableCoin.sol\\\";\\nimport \\\"./Oracle/Converter.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/**\\n *  @title nUSDEngine\\n *  @author Parthib Datta\\n *  The system is designed to be as minimal as possible, and have the tokens maintain a (1/2 of Price of ETH) token == Price of ETH peg at all times.\\n * This is a stablecoin with the properties:\\n * - Exogenously Collateralized\\n * - ETH Pegged\\n * - Algorithmically Stable\\n *\\n * It is similar to DAI if DAI had no governance, no fees, and was backed by only ETH.\\n *\\n * @notice This contract is the core of the Decentralized Stablecoin system. It handles all the logic\\n * for minting and redeeming DSC, as well as depositing and withdrawing collateral.\\n *\\n *  This contract is just the ERC20 implementation of our stablecoin system\\n *\\n */\\n\\ncontract nUSDEngine is ReentrancyGuard {\\n    error nDSCEngine__NeedsMoreThanZero();\\n    error nUSDEngine__MintFailed();\\n    error nUSDEngine__TransferFailed();\\n    error nDSCEngine__InsufficientBalance();\\n\\n    StableCoin private immutable i_dsc;\\n    Convertor private immutable i_convert;\\n\\n    mapping(address => uint256) private balances;\\n\\n    uint64 private constant THRESHOLD = 50;\\n\\n    event Deposited(address indexed User, uint256 indexed amount);\\n    event Redeemed(address indexed User, uint256 indexed amount);\\n\\n    modifier moreThanZero(uint256 amount) {\\n        if (amount == 0) {\\n            revert nDSCEngine__NeedsMoreThanZero();\\n        }\\n        _;\\n    }\\n\\n    /**\\n     * @param dscAddress: Address of the token\\n     *  @param _convertorAddress: Address of the converter contract\\n     */\\n    constructor(address dscAddress, address _convertorAddress) {\\n        i_dsc = StableCoin(dscAddress);\\n        i_convert = Convertor(_convertorAddress);\\n    }\\n\\n    /**\\n     *  The amount of ETH you want to deposit\\n     */\\n    function deposite() public payable moreThanZero(msg.value) nonReentrant {\\n        uint256 amount = msg.value / 1e9;\\n        uint256 priceAmount = i_convert.getConversionRate(amount);\\n        uint256 nUSDAmount = (priceAmount * THRESHOLD) / 100;\\n        if (nUSDAmount <= 0) {\\n            revert nDSCEngine__NeedsMoreThanZero();\\n        }\\n        bool minted = i_dsc.mint(msg.sender, nUSDAmount);\\n        if (minted != true) {\\n            revert nUSDEngine__MintFailed();\\n        }\\n        balances[msg.sender] += amount;\\n        emit Deposited(msg.sender, amount);\\n    }\\n\\n    /**\\n     *\\n     * @param amount: The Amount of ETH you want to redeem in Gwei\\n     */\\n    function redeem(uint256 amount) external moreThanZero(amount) {\\n        if (balances[msg.sender] < amount) {\\n            revert nDSCEngine__InsufficientBalance();\\n        }\\n        balances[msg.sender] -= amount;\\n        uint256 priceAmount = i_convert.getConversionRate(amount);\\n        uint256 nUSDAmount = (priceAmount * THRESHOLD) / 100;\\n        i_dsc.burn(msg.sender, nUSDAmount);\\n        payable(msg.sender).transfer(amount * 1e9);\\n        emit Redeemed(msg.sender, amount);\\n    }\\n\\n    function getDepositBalance(address user) public view returns (uint256) {\\n        return balances[user];\\n    }\\n\\n    function getBalance(address user) public view returns (uint256) {\\n        return i_dsc.balanceOf(user);\\n    }\\n\\n    function getTotalSupply() public view returns (uint256) {\\n        return i_dsc.totalSupply();\\n    }\\n}\\n\",\"keccak256\":\"0x17dd01ee8c79e3addf42c940b8246371ce7010b02b1ed7fde9746854a08e9106\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60c060405234801561001057600080fd5b5060405162000f0438038062000f04833981810160405281019061003491906100c6565b60016000819055508173ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1660601b815250508073ffffffffffffffffffffffffffffffffffffffff1660a08173ffffffffffffffffffffffffffffffffffffffff1660601b815250505050610154565b6000815190506100c08161013d565b92915050565b600080604083850312156100dd576100dc610138565b5b60006100eb858286016100b1565b92505060206100fc858286016100b1565b9150509250929050565b600061011182610118565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600080fd5b61014681610106565b811461015157600080fd5b50565b60805160601c60a05160601c610d686200019c6000396000818161018301526105d901526000818161029101528181610429015281816106ab01526108230152610d686000f3fe60806040526004361061004a5760003560e01c8063a50ec3261461004f578063c4e41b2214610059578063db006a7514610084578063ed05ae78146100ad578063f8b2cb4f146100ea575b600080fd5b610057610127565b005b34801561006557600080fd5b5061006e610425565b60405161007b9190610ad8565b60405180910390f35b34801561009057600080fd5b506100ab60048036038101906100a691906109d9565b6104ca565b005b3480156100b957600080fd5b506100d460048036038101906100cf919061097f565b6107d6565b6040516100e19190610ad8565b60405180910390f35b3480156100f657600080fd5b50610111600480360381019061010c919061097f565b61081f565b60405161011e9190610ad8565b60405180910390f35b346000811415610163576040517f441f236c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61016b6108d1565b6000633b9aca003461017d9190610b5a565b905060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16636e5b6b28836040518263ffffffff1660e01b81526004016101da9190610ad8565b60206040518083038186803b1580156101f257600080fd5b505afa158015610206573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061022a9190610a06565b905060006064603267ffffffffffffffff16836102479190610b8b565b6102519190610b5a565b90506000811161028d576040517f441f236c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166340c10f1933846040518363ffffffff1660e01b81526004016102ea929190610a8f565b602060405180830381600087803b15801561030457600080fd5b505af1158015610318573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061033c91906109ac565b9050600115158115151461037c576040517fd4f0b6d600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b83600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546103cb9190610b04565b92505081905550833373ffffffffffffffffffffffffffffffffffffffff167f2da466a7b24304f47e87fa2e1e5a81b9831ce54fec19055ce277ca2f39ba42c460405160405180910390a350505050610422610921565b50565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561048d57600080fd5b505afa1580156104a1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104c59190610a06565b905090565b806000811415610506576040517f441f236c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b81600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054101561057f576040517f7a669f9400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b81600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546105ce9190610be5565b9250508190555060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16636e5b6b28846040518263ffffffff1660e01b81526004016106309190610ad8565b60206040518083038186803b15801561064857600080fd5b505afa15801561065c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106809190610a06565b905060006064603267ffffffffffffffff168361069d9190610b8b565b6106a79190610b5a565b90507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16639dc29fac33836040518363ffffffff1660e01b8152600401610704929190610a8f565b600060405180830381600087803b15801561071e57600080fd5b505af1158015610732573d6000803e3d6000fd5b505050503373ffffffffffffffffffffffffffffffffffffffff166108fc633b9aca00866107609190610b8b565b9081150290604051600060405180830381858888f1935050505015801561078b573d6000803e3d6000fd5b50833373ffffffffffffffffffffffffffffffffffffffff167f4896181ff8f4543cc00db9fe9b6fb7e6f032b7eb772c72ab1ec1b4d2e03b936960405160405180910390a350505050565b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166370a08231836040518263ffffffff1660e01b815260040161087a9190610a74565b60206040518083038186803b15801561089257600080fd5b505afa1580156108a6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108ca9190610a06565b9050919050565b60026000541415610917576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161090e90610ab8565b60405180910390fd5b6002600081905550565b6001600081905550565b60008135905061093a81610ced565b92915050565b60008151905061094f81610d04565b92915050565b60008135905061096481610d1b565b92915050565b60008151905061097981610d1b565b92915050565b60006020828403121561099557610994610cbf565b5b60006109a38482850161092b565b91505092915050565b6000602082840312156109c2576109c1610cbf565b5b60006109d084828501610940565b91505092915050565b6000602082840312156109ef576109ee610cbf565b5b60006109fd84828501610955565b91505092915050565b600060208284031215610a1c57610a1b610cbf565b5b6000610a2a8482850161096a565b91505092915050565b610a3c81610c19565b82525050565b6000610a4f601f83610af3565b9150610a5a82610cc4565b602082019050919050565b610a6e81610c57565b82525050565b6000602082019050610a896000830184610a33565b92915050565b6000604082019050610aa46000830185610a33565b610ab16020830184610a65565b9392505050565b60006020820190508181036000830152610ad181610a42565b9050919050565b6000602082019050610aed6000830184610a65565b92915050565b600082825260208201905092915050565b6000610b0f82610c57565b9150610b1a83610c57565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610b4f57610b4e610c61565b5b828201905092915050565b6000610b6582610c57565b9150610b7083610c57565b925082610b8057610b7f610c90565b5b828204905092915050565b6000610b9682610c57565b9150610ba183610c57565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610bda57610bd9610c61565b5b828202905092915050565b6000610bf082610c57565b9150610bfb83610c57565b925082821015610c0e57610c0d610c61565b5b828203905092915050565b6000610c2482610c37565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600080fd5b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00600082015250565b610cf681610c19565b8114610d0157600080fd5b50565b610d0d81610c2b565b8114610d1857600080fd5b50565b610d2481610c57565b8114610d2f57600080fd5b5056fea2646970667358221220fbd6bf088a4e5e44f9a983fb75df82824e3bc124baa370d8b9526d145883b7cd64736f6c63430008070033",
  "deployedBytecode": "0x60806040526004361061004a5760003560e01c8063a50ec3261461004f578063c4e41b2214610059578063db006a7514610084578063ed05ae78146100ad578063f8b2cb4f146100ea575b600080fd5b610057610127565b005b34801561006557600080fd5b5061006e610425565b60405161007b9190610ad8565b60405180910390f35b34801561009057600080fd5b506100ab60048036038101906100a691906109d9565b6104ca565b005b3480156100b957600080fd5b506100d460048036038101906100cf919061097f565b6107d6565b6040516100e19190610ad8565b60405180910390f35b3480156100f657600080fd5b50610111600480360381019061010c919061097f565b61081f565b60405161011e9190610ad8565b60405180910390f35b346000811415610163576040517f441f236c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61016b6108d1565b6000633b9aca003461017d9190610b5a565b905060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16636e5b6b28836040518263ffffffff1660e01b81526004016101da9190610ad8565b60206040518083038186803b1580156101f257600080fd5b505afa158015610206573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061022a9190610a06565b905060006064603267ffffffffffffffff16836102479190610b8b565b6102519190610b5a565b90506000811161028d576040517f441f236c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166340c10f1933846040518363ffffffff1660e01b81526004016102ea929190610a8f565b602060405180830381600087803b15801561030457600080fd5b505af1158015610318573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061033c91906109ac565b9050600115158115151461037c576040517fd4f0b6d600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b83600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546103cb9190610b04565b92505081905550833373ffffffffffffffffffffffffffffffffffffffff167f2da466a7b24304f47e87fa2e1e5a81b9831ce54fec19055ce277ca2f39ba42c460405160405180910390a350505050610422610921565b50565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561048d57600080fd5b505afa1580156104a1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104c59190610a06565b905090565b806000811415610506576040517f441f236c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b81600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054101561057f576040517f7a669f9400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b81600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546105ce9190610be5565b9250508190555060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16636e5b6b28846040518263ffffffff1660e01b81526004016106309190610ad8565b60206040518083038186803b15801561064857600080fd5b505afa15801561065c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106809190610a06565b905060006064603267ffffffffffffffff168361069d9190610b8b565b6106a79190610b5a565b90507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16639dc29fac33836040518363ffffffff1660e01b8152600401610704929190610a8f565b600060405180830381600087803b15801561071e57600080fd5b505af1158015610732573d6000803e3d6000fd5b505050503373ffffffffffffffffffffffffffffffffffffffff166108fc633b9aca00866107609190610b8b565b9081150290604051600060405180830381858888f1935050505015801561078b573d6000803e3d6000fd5b50833373ffffffffffffffffffffffffffffffffffffffff167f4896181ff8f4543cc00db9fe9b6fb7e6f032b7eb772c72ab1ec1b4d2e03b936960405160405180910390a350505050565b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166370a08231836040518263ffffffff1660e01b815260040161087a9190610a74565b60206040518083038186803b15801561089257600080fd5b505afa1580156108a6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108ca9190610a06565b9050919050565b60026000541415610917576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161090e90610ab8565b60405180910390fd5b6002600081905550565b6001600081905550565b60008135905061093a81610ced565b92915050565b60008151905061094f81610d04565b92915050565b60008135905061096481610d1b565b92915050565b60008151905061097981610d1b565b92915050565b60006020828403121561099557610994610cbf565b5b60006109a38482850161092b565b91505092915050565b6000602082840312156109c2576109c1610cbf565b5b60006109d084828501610940565b91505092915050565b6000602082840312156109ef576109ee610cbf565b5b60006109fd84828501610955565b91505092915050565b600060208284031215610a1c57610a1b610cbf565b5b6000610a2a8482850161096a565b91505092915050565b610a3c81610c19565b82525050565b6000610a4f601f83610af3565b9150610a5a82610cc4565b602082019050919050565b610a6e81610c57565b82525050565b6000602082019050610a896000830184610a33565b92915050565b6000604082019050610aa46000830185610a33565b610ab16020830184610a65565b9392505050565b60006020820190508181036000830152610ad181610a42565b9050919050565b6000602082019050610aed6000830184610a65565b92915050565b600082825260208201905092915050565b6000610b0f82610c57565b9150610b1a83610c57565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610b4f57610b4e610c61565b5b828201905092915050565b6000610b6582610c57565b9150610b7083610c57565b925082610b8057610b7f610c90565b5b828204905092915050565b6000610b9682610c57565b9150610ba183610c57565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610bda57610bd9610c61565b5b828202905092915050565b6000610bf082610c57565b9150610bfb83610c57565b925082821015610c0e57610c0d610c61565b5b828203905092915050565b6000610c2482610c37565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600080fd5b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00600082015250565b610cf681610c19565b8114610d0157600080fd5b50565b610d0d81610c2b565b8114610d1857600080fd5b50565b610d2481610c57565b8114610d2f57600080fd5b5056fea2646970667358221220fbd6bf088a4e5e44f9a983fb75df82824e3bc124baa370d8b9526d145883b7cd64736f6c63430008070033",
  "devdoc": {
    "author": "Parthib Datta  The system is designed to be as minimal as possible, and have the tokens maintain a (1/2 of Price of ETH) token == Price of ETH peg at all times. This is a stablecoin with the properties: - Exogenously Collateralized - ETH Pegged - Algorithmically Stable It is similar to DAI if DAI had no governance, no fees, and was backed by only ETH.",
    "kind": "dev",
    "methods": {
      "constructor": {
        "params": {
          "_convertorAddress": ": Address of the converter contract",
          "dscAddress": ": Address of the token"
        }
      },
      "redeem(uint256)": {
        "params": {
          "amount": ": The Amount of ETH you want to redeem in Gwei"
        }
      }
    },
    "title": "nUSDEngine",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "deposite()": {
        "notice": "The amount of ETH you want to deposit"
      }
    },
    "notice": "This contract is the core of the Decentralized Stablecoin system. It handles all the logic for minting and redeeming DSC, as well as depositing and withdrawing collateral.  This contract is just the ERC20 implementation of our stablecoin system",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 56,
        "contract": "contracts/nUSDEngine.sol:nUSDEngine",
        "label": "_status",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 1001,
        "contract": "contracts/nUSDEngine.sol:nUSDEngine",
        "label": "balances",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}